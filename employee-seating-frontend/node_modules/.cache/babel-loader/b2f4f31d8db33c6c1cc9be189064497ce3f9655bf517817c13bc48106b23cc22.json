{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, normalizeClass as _normalizeClass, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"seating-arrangement\"\n};\nconst _hoisted_2 = {\n  class: \"employee-selection\"\n};\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = {\n  class: \"seats\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"submit-btn\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[6] || (_cache[6] = _createElementVNode(\"h1\", {\n    class: \"title\"\n  }, \"員工座位安排\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    for: \"employeeSelect\"\n  }, \"選擇員工：\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedEmployee.empId = $event),\n    id: \"employeeSelect\",\n    onFocus: _cache[1] || (_cache[1] = (...args) => $options.openEmployeeSelect && $options.openEmployeeSelect(...args)),\n    onChange: _cache[2] || (_cache[2] = $event => $options.selectEmployee($event)),\n    ref: \"employeeSelect\"\n  }, [_cache[4] || (_cache[4] = _createElementVNode(\"option\", {\n    value: \"\",\n    disabled: \"\"\n  }, \"請選擇員工\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredEmployees, emp => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: emp.empId,\n      value: emp.empId\n    }, _toDisplayString(emp.name) + \" (員編: \" + _toDisplayString(emp.empId) + \") \", 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.selectedEmployee.empId]])]), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.seatingCharts, seat => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: seat.seatNo,\n      class: \"seat-container\"\n    }, [_createElementVNode(\"button\", {\n      class: _normalizeClass($options.getSeatClass(seat)),\n      onClick: $event => $options.selectSeat(seat)\n    }, _toDisplayString(seat.floorNo) + \" 樓：座位\" + _toDisplayString(seat.seatNo) + \" \" + _toDisplayString(seat.isOccupied ? '[ 員編:' + seat.empId + ' ]' : ''), 11 /* TEXT, CLASS, PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _cache[7] || (_cache[7] = _createStaticVNode(\"<div class=\\\"seat-status-indicators\\\"><div class=\\\"status-item\\\"><span class=\\\"status-indicator available\\\"></span><span class=\\\"status-text\\\">空位</span></div><div class=\\\"status-item\\\"><span class=\\\"status-indicator occupied\\\"></span><span class=\\\"status-text\\\">已佔用</span></div><div class=\\\"status-item\\\"><span class=\\\"status-indicator selected\\\"></span><span class=\\\"status-text\\\">請選擇</span></div></div>\", 1)), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.submitArrangement && $options.submitArrangement(...args))\n  }, \"送出\")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","for","_cache","$event","$data","selectedEmployee","empId","id","onFocus","args","$options","openEmployeeSelect","onChange","selectEmployee","ref","value","disabled","_Fragment","_renderList","filteredEmployees","emp","key","name","_toDisplayString","_hoisted_3","_hoisted_4","seatingCharts","seat","seatNo","_normalizeClass","getSeatClass","onClick","selectSeat","floorNo","isOccupied","_hoisted_5","_createStaticVNode","_hoisted_6","submitArrangement"],"sources":["C:\\Users\\tzutung\\employee-seating\\employee-seating-frontend\\src\\views\\SeatArrangement\\SeatArrangement.vue"],"sourcesContent":["<template>\r\n  <div class=\"seating-arrangement\">\r\n    <h1 class=\"title\">員工座位安排</h1>\r\n\r\n    <div class=\"employee-selection\">\r\n      <label for=\"employeeSelect\">選擇員工：</label>\r\n      <select v-model=\"selectedEmployee.empId\" id=\"employeeSelect\" @focus=\"openEmployeeSelect\" @change=\"selectEmployee($event)\" ref=\"employeeSelect\">\r\n        <option value=\"\" disabled>請選擇員工</option>\r\n        <option v-for=\"emp in filteredEmployees\" :key=\"emp.empId\" :value=\"emp.empId\">\r\n          {{ emp.name }} (員編: {{ emp.empId }})\r\n        </option>\r\n      </select>\r\n    </div>\r\n\r\n    <div class=\"seats\">\r\n      <div v-for=\"seat in seatingCharts\" :key=\"seat.seatNo\" class=\"seat-container\">\r\n        <button\r\n          :class=\"getSeatClass(seat)\"\r\n          @click=\"selectSeat(seat)\"\r\n        >\r\n          {{ seat.floorNo }} 樓：座位{{ seat.seatNo }} {{ seat.isOccupied ? '[ 員編:' + seat.empId + ' ]' : '' }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"seat-status-indicators\">\r\n      <div class=\"status-item\">\r\n        <span class=\"status-indicator available\"></span>\r\n        <span class=\"status-text\">空位</span>\r\n      </div>\r\n      <div class=\"status-item\">\r\n        <span class=\"status-indicator occupied\"></span>\r\n        <span class=\"status-text\">已佔用</span>\r\n      </div>\r\n      <div class=\"status-item\">\r\n        <span class=\"status-indicator selected\"></span>\r\n        <span class=\"status-text\">請選擇</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"submit-btn\">\r\n      <button @click=\"submitArrangement\">送出</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport './SeatArrangement.css';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      seatingCharts: [],\r\n      employees: [],\r\n      selectedSeat: null,\r\n      selectedEmployee: { empId: '', name: '', email: '' },\r\n      searchQuery: '',\r\n      isEmployeeSelectOpen: false\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    filteredEmployees() {\r\n      return this.employees.filter(emp => \r\n        (emp.empId.includes(this.searchQuery) || emp.name.includes(this.searchQuery)) && emp.floorSeatSeq === 0\r\n      );\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.loadEmployees();\r\n    this.loadSeatingCharts();\r\n  },\r\n\r\n  methods: {\r\n    loadEmployees() {\r\n      this.$apiService\r\n        .get(this.$employees.getAllEmployees)\r\n        .then((res) => {\r\n          this.employees = res;\r\n        })\r\n        .catch(() => {});\r\n    },\r\n\r\n    loadSeatingCharts() {\r\n      this.$apiService\r\n        .get(this.$seatingCharts.getEmployeeSeatAssignments)\r\n        .then((res) => {\r\n          this.seatingCharts = res;\r\n        })\r\n        .catch(() => {});\r\n    },\r\n\r\n    getSeatClass(seat) {\r\n      if (seat.isOccupied) {\r\n        return 'occupied';\r\n      }\r\n      if (this.selectedSeat && this.selectedSeat.seatNo === seat.seatNo && this.selectedSeat.floorNo === seat.floorNo) {\r\n        return 'selected';\r\n      }\r\n      return 'available';\r\n    },\r\n\r\n    selectSeat(seat) {\r\n      this.selectedSeat = seat;\r\n      if (seat.isOccupied) {\r\n        this.setSelectedEmployee(seat.empId);\r\n\r\n        if (confirm(`該座位已被員工（員編: ${seat.empId}）佔用，是否釋放此座位？`)) {\r\n          this.releaseSeat(seat);\r\n        }\r\n      } else {\r\n        this.selectedSeat = seat;\r\n      }\r\n    },\r\n\r\n    selectEmployee(event) {\r\n      const empId = event.target.value;\r\n      if (empId) {\r\n        this.setSelectedEmployee(empId);\r\n      } else {\r\n        this.selectedEmployee = { empId: '', name: '', email: '' };\r\n      }\r\n    },\r\n\r\n    setSelectedEmployee(empId) {\r\n      const selectedEmp = this.employees.find(emp => emp.empId === empId);\r\n      if (selectedEmp) {\r\n        this.selectedEmployee = { \r\n          empId: selectedEmp.empId, \r\n          name: selectedEmp.name, \r\n          email: selectedEmp.email \r\n        };\r\n      }\r\n    },\r\n\r\n    submitArrangement() {\r\n      if (!this.selectedEmployee.empId || !this.selectedSeat) {\r\n        if (!this.selectedEmployee.empId) {\r\n          this.$refs.employeeSelect.focus();\r\n          this.isEmployeeSelectOpen = true;\r\n          alert(\"請選擇員工！\");\r\n        } else if (!this.selectedSeat) {\r\n          alert(\"請選擇座位！\");\r\n        }\r\n        return;\r\n      }\r\n\r\n      const request = {\r\n        empId: this.selectedEmployee.empId,\r\n        name: this.selectedEmployee.name,\r\n        email: this.selectedEmployee.email,\r\n        floorSeatSeq: this.selectedSeat.floorSeatSeq\r\n      };\r\n\r\n      this.$apiService\r\n        .put(this.$employees.updateEmployee(this.selectedEmployee.empId), request)\r\n        .then(() => {\r\n          alert(\"座位安排更新成功！\");\r\n          this.loadSeatingCharts();\r\n          this.selectedSeat = null;\r\n          this.selectedEmployee = {};\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"更新失敗:\", error);\r\n          alert(\"更新失敗：\" + error.message);\r\n        });\r\n    },\r\n\r\n    openEmployeeSelect() {\r\n      this.isEmployeeSelectOpen = true;\r\n    },\r\n\r\n    releaseSeat() {\r\n      const request = {\r\n          empId: this.selectedEmployee.empId,\r\n          name: this.selectedEmployee.name,\r\n          email: this.selectedEmployee.email,\r\n          floorSeatSeq: null\r\n        };\r\n\r\n      this.$apiService\r\n        .put(this.$employees.updateEmployee(this.selectedEmployee.empId), request)\r\n        .then(() => {\r\n          alert(\"座位已成功釋放！\");\r\n          this.selectedEmployee = { empId: '', name: '', email: '' };\r\n          this.selectedSeat = null;\r\n          this.loadSeatingCharts(); \r\n        })\r\n        .catch((error) => {\r\n          console.error(\"釋放座位失敗:\", error);\r\n          alert(\"釋放座位失敗：\" + error.message);\r\n        });\r\n    }\r\n  }\r\n};\r\n</script>"],"mappings":";;EACOA,KAAK,EAAC;AAAqB;;EAGzBA,KAAK,EAAC;AAAoB;mBAJnC;;EAcSA,KAAK,EAAC;AAAO;mBAdtB;;EAwCSA,KAAK,EAAC;AAAY;;uBAvCzBC,mBAAA,CA0CM,OA1CNC,UA0CM,G,0BAzCJC,mBAAA,CAA6B;IAAzBH,KAAK,EAAC;EAAO,GAAC,QAAM,sBAExBG,mBAAA,CAQM,OARNC,UAQM,G,0BAPJD,mBAAA,CAAyC;IAAlCE,GAAG,EAAC;EAAgB,GAAC,OAAK,sB,gBACjCF,mBAAA,CAKS;IAXf,uBAAAG,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMuBC,KAAA,CAAAC,gBAAgB,CAACC,KAAK,GAAAH,MAAA;IAAEI,EAAE,EAAC,gBAAgB;IAAEC,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,kBAAA,IAAAD,QAAA,CAAAC,kBAAA,IAAAF,IAAA,CAAkB;IAAGG,QAAM,EAAAV,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEO,QAAA,CAAAG,cAAc,CAACV,MAAM;IAAGW,GAAG,EAAC;gCAC5Hf,mBAAA,CAAwC;IAAhCgB,KAAK,EAAC,EAAE;IAACC,QAAQ,EAAR;KAAS,OAAK,uB,kBAC/BnB,mBAAA,CAESoB,SAAA,QAVjBC,WAAA,CAQ8BR,QAAA,CAAAS,iBAAiB,EAAxBC,GAAG;yBAAlBvB,mBAAA,CAES;MAFiCwB,GAAG,EAAED,GAAG,CAACd,KAAK;MAAGS,KAAK,EAAEK,GAAG,CAACd;wBACjEc,GAAG,CAACE,IAAI,IAAG,QAAM,GAAAC,gBAAA,CAAGH,GAAG,CAACd,KAAK,IAAG,IACrC,uBAVRkB,UAAA;2FAMuBpB,KAAA,CAAAC,gBAAgB,CAACC,KAAK,E,KAQzCP,mBAAA,CASM,OATN0B,UASM,I,kBARJ5B,mBAAA,CAOMoB,SAAA,QAtBZC,WAAA,CAe0Bd,KAAA,CAAAsB,aAAa,EAArBC,IAAI;yBAAhB9B,mBAAA,CAOM;MAP8BwB,GAAG,EAAEM,IAAI,CAACC,MAAM;MAAEhC,KAAK,EAAC;QAC1DG,mBAAA,CAKS;MAJNH,KAAK,EAjBhBiC,eAAA,CAiBkBnB,QAAA,CAAAoB,YAAY,CAACH,IAAI;MACxBI,OAAK,EAAA5B,MAAA,IAAEO,QAAA,CAAAsB,UAAU,CAACL,IAAI;wBAEpBA,IAAI,CAACM,OAAO,IAAG,OAAK,GAAAV,gBAAA,CAAGI,IAAI,CAACC,MAAM,IAAG,GAAC,GAAAL,gBAAA,CAAGI,IAAI,CAACO,UAAU,aAAaP,IAAI,CAACrB,KAAK,4CApB5F6B,UAAA,E;8DAAAC,kBAAA,8ZAwCIrC,mBAAA,CAEM,OAFNsC,UAEM,GADJtC,mBAAA,CAA8C;IAArCgC,OAAK,EAAA7B,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAA4B,iBAAA,IAAA5B,QAAA,CAAA4B,iBAAA,IAAA7B,IAAA,CAAiB;KAAE,IAAE,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}