{"ast":null,"code":"import { getAllSeatingCharts, updateSeatStatusToOccupied, updateSeatStatusToAvailable } from '../../api/seatingChartApi';\nimport { getAllEmployees } from '../../api/employeeApi';\nexport default {\n  data() {\n    return {\n      seatingCharts: [],\n      // 儲存所有樓層的座位資料\n      employees: [],\n      // 儲存所有員工資料\n      selectedSeat: null,\n      // 被選中的座位\n      selectedEmpId: '' // 被選中的員工編號\n    };\n  },\n  created() {\n    this.loadSeatingCharts();\n    this.loadEmployees();\n  },\n  methods: {\n    // 加載座位資料\n    async loadSeatingCharts() {\n      try {\n        this.seatingCharts = await getAllSeatingCharts();\n      } catch (error) {\n        console.error('Error loading seating charts:', error);\n      }\n    },\n    // 加載員工資料\n    async loadEmployees() {\n      try {\n        this.employees = await getAllEmployees();\n      } catch (error) {\n        console.error('Error loading employees:', error);\n      }\n    },\n    // 根據座位狀態設定按鈕的樣式\n    getSeatClass(seat) {\n      if (seat.isOccupied) return 'seat-occupied'; // 已佔用\n      if (this.selectedSeat && this.selectedSeat.floorSeatSeq === seat.floorSeatSeq) return 'seat-selected'; // 選擇中的座位\n      return 'seat-empty'; // 空位\n    },\n    // 設定選擇的座位\n    selectSeat(seat) {\n      if (seat.isOccupied) return; // 如果座位已佔用，不能選擇\n      this.selectedSeat = seat;\n    },\n    // 提交選擇的座位安排\n    async submitArrangement() {\n      if (!this.selectedSeat || !this.selectedEmpId) {\n        alert('請選擇員工和座位！');\n        return;\n      }\n\n      // 更新座位的佔用狀態\n      try {\n        if (this.selectedSeat.isOccupied) {\n          // 如果該座位已佔用，將其標記為可用\n          await updateSeatStatusToAvailable(this.selectedSeat.floorSeatSeq);\n        }\n        // 標記新的座位為已佔用，並更新員工資料\n        await updateSeatStatusToOccupied(this.selectedSeat.floorSeatSeq);\n        alert('座位安排成功！');\n        this.loadSeatingCharts(); // 重新加載座位資料\n      } catch (error) {\n        console.error('Error updating seating arrangement:', error);\n        alert('座位安排失敗！');\n      }\n    }\n  }\n};","map":{"version":3,"names":["getAllSeatingCharts","updateSeatStatusToOccupied","updateSeatStatusToAvailable","getAllEmployees","data","seatingCharts","employees","selectedSeat","selectedEmpId","created","loadSeatingCharts","loadEmployees","methods","error","console","getSeatClass","seat","isOccupied","floorSeatSeq","selectSeat","submitArrangement","alert"],"sources":["C:\\Users\\tzutung\\Tzutung\\employee-seating-frontend\\src\\views\\SeatArrangement\\SeatArrangement.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>員工座位安排</h1>\r\n\r\n    <!-- 顯示座位的樓層和座位 -->\r\n    <div v-for=\"floor in seatingCharts\" :key=\"floor.floorNo\" class=\"floor\">\r\n      <h2>{{ floor.floorNo }} 樓</h2>\r\n      <div class=\"seats\">\r\n        <div v-for=\"seat in floor.seats\" :key=\"seat.floorSeatSeq\" class=\"seat-container\">\r\n          <button\r\n            :class=\"getSeatClass(seat)\"\r\n            @click=\"selectSeat(seat)\"\r\n            :disabled=\"seat.isOccupied\"\r\n          >\r\n            座位{{ seat.seatNo }} [{{ seat.isOccupied ? '員編:' + seat.empId : '空位' }}]\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 員工選擇下拉選單 -->\r\n    <div>\r\n      <label for=\"employeeSelect\">選擇員工：</label>\r\n      <select v-model=\"selectedEmpId\" id=\"employeeSelect\">\r\n        <option v-for=\"emp in employees\" :key=\"emp.empId\" :value=\"emp.empId\">\r\n          {{ emp.name }} (員編: {{ emp.empId }})\r\n        </option>\r\n      </select>\r\n    </div>\r\n\r\n    <!-- 送出按鈕 -->\r\n    <button @click=\"submitArrangement\">送出</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getAllSeatingCharts, updateSeatStatusToOccupied, updateSeatStatusToAvailable } from '../../api/seatingChartApi';\r\nimport { getAllEmployees } from '../../api/employeeApi';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      seatingCharts: [],  // 儲存所有樓層的座位資料\r\n      employees: [],  // 儲存所有員工資料\r\n      selectedSeat: null,  // 被選中的座位\r\n      selectedEmpId: '',  // 被選中的員工編號\r\n    };\r\n  },\r\n  created() {\r\n    this.loadSeatingCharts();\r\n    this.loadEmployees();\r\n  },\r\n  methods: {\r\n    // 加載座位資料\r\n    async loadSeatingCharts() {\r\n      try {\r\n        this.seatingCharts = await getAllSeatingCharts();\r\n      } catch (error) {\r\n        console.error('Error loading seating charts:', error);\r\n      }\r\n    },\r\n    // 加載員工資料\r\n    async loadEmployees() {\r\n      try {\r\n        this.employees = await getAllEmployees();\r\n      } catch (error) {\r\n        console.error('Error loading employees:', error);\r\n      }\r\n    },\r\n    // 根據座位狀態設定按鈕的樣式\r\n    getSeatClass(seat) {\r\n      if (seat.isOccupied) return 'seat-occupied'; // 已佔用\r\n      if (this.selectedSeat && this.selectedSeat.floorSeatSeq === seat.floorSeatSeq) return 'seat-selected'; // 選擇中的座位\r\n      return 'seat-empty'; // 空位\r\n    },\r\n    // 設定選擇的座位\r\n    selectSeat(seat) {\r\n      if (seat.isOccupied) return; // 如果座位已佔用，不能選擇\r\n      this.selectedSeat = seat;\r\n    },\r\n    // 提交選擇的座位安排\r\n    async submitArrangement() {\r\n      if (!this.selectedSeat || !this.selectedEmpId) {\r\n        alert('請選擇員工和座位！');\r\n        return;\r\n      }\r\n\r\n      // 更新座位的佔用狀態\r\n      try {\r\n        if (this.selectedSeat.isOccupied) {\r\n          // 如果該座位已佔用，將其標記為可用\r\n          await updateSeatStatusToAvailable(this.selectedSeat.floorSeatSeq);\r\n        }\r\n        // 標記新的座位為已佔用，並更新員工資料\r\n        await updateSeatStatusToOccupied(this.selectedSeat.floorSeatSeq);\r\n        alert('座位安排成功！');\r\n        this.loadSeatingCharts(); // 重新加載座位資料\r\n      } catch (error) {\r\n        console.error('Error updating seating arrangement:', error);\r\n        alert('座位安排失敗！');\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped src=\"./SseatArrangement.scss\"></style>\r\n"],"mappings":"AAoCA,SAASA,mBAAmB,EAAEC,0BAA0B,EAAEC,2BAA0B,QAAS,2BAA2B;AACxH,SAASC,eAAc,QAAS,uBAAuB;AAEvD,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,EAAE;MAAG;MACpBC,SAAS,EAAE,EAAE;MAAG;MAChBC,YAAY,EAAE,IAAI;MAAG;MACrBC,aAAa,EAAE,EAAE,CAAG;IACtB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,iBAAiB,CAAC,CAAC;IACxB,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMF,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,IAAI,CAACL,aAAY,GAAI,MAAML,mBAAmB,CAAC,CAAC;MAClD,EAAE,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IACD;IACA,MAAMF,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,IAAI,CAACL,SAAQ,GAAI,MAAMH,eAAe,CAAC,CAAC;MAC1C,EAAE,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACD;IACAE,YAAYA,CAACC,IAAI,EAAE;MACjB,IAAIA,IAAI,CAACC,UAAU,EAAE,OAAO,eAAe,EAAE;MAC7C,IAAI,IAAI,CAACV,YAAW,IAAK,IAAI,CAACA,YAAY,CAACW,YAAW,KAAMF,IAAI,CAACE,YAAY,EAAE,OAAO,eAAe,EAAE;MACvG,OAAO,YAAY,EAAE;IACvB,CAAC;IACD;IACAC,UAAUA,CAACH,IAAI,EAAE;MACf,IAAIA,IAAI,CAACC,UAAU,EAAE,OAAM,CAAE;MAC7B,IAAI,CAACV,YAAW,GAAIS,IAAI;IAC1B,CAAC;IACD;IACA,MAAMI,iBAAiBA,CAAA,EAAG;MACxB,IAAI,CAAC,IAAI,CAACb,YAAW,IAAK,CAAC,IAAI,CAACC,aAAa,EAAE;QAC7Ca,KAAK,CAAC,WAAW,CAAC;QAClB;MACF;;MAEA;MACA,IAAI;QACF,IAAI,IAAI,CAACd,YAAY,CAACU,UAAU,EAAE;UAChC;UACA,MAAMf,2BAA2B,CAAC,IAAI,CAACK,YAAY,CAACW,YAAY,CAAC;QACnE;QACA;QACA,MAAMjB,0BAA0B,CAAC,IAAI,CAACM,YAAY,CAACW,YAAY,CAAC;QAChEG,KAAK,CAAC,SAAS,CAAC;QAChB,IAAI,CAACX,iBAAiB,CAAC,CAAC,EAAE;MAC5B,EAAE,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3DQ,KAAK,CAAC,SAAS,CAAC;MAClB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}