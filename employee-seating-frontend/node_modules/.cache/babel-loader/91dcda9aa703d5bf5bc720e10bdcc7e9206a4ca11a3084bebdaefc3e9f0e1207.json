{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport './Employee.css';\nexport default {\n  name: \"EmployeePage\",\n  data() {\n    return {\n      searchQuery: '',\n      employees: [],\n      // 儲存員工資料\n      newEmployee: {\n        empId: '',\n        name: '',\n        email: '',\n        floorSeatSeq: 0\n      },\n      isEmployeeDialogVisible: false,\n      // 控制員工對話框顯示\n      isEdit: false,\n      // 判斷是否為編輯模式\n      employeeForm: {\n        empId: '',\n        name: '',\n        email: '',\n        floorSeatSeq: 0\n      } // 預設座位為 0（未分配座位）\n    };\n  },\n  computed: {\n    filteredEmployees() {\n      return this.employees.filter(emp => emp.empId.includes(this.searchQuery) || emp.name.includes(this.searchQuery));\n    }\n  },\n  methods: {\n    // 載入員工資料\n    loadEmployees() {\n      this.$apiService.get(this.$employees.getAllEmployees) // 使用API的方式\n      .then(res => {\n        this.employees = res;\n      }).catch(() => {\n        console.error(\"無法載入員工資料\");\n      });\n    },\n    // 顯示新增員工視窗\n    showAddEmployeeDialog() {\n      this.isEmployeeDialogVisible = true;\n      this.isEdit = false; // 設為新增模式\n      this.employeeForm = {\n        empId: '',\n        name: '',\n        email: '',\n        floorSeatSeq: 0\n      }; // 重置表單，預設未分配座位\n    },\n    // 顯示編輯員工視窗\n    showEditEmployeeDialog(employee) {\n      this.isEmployeeDialogVisible = true;\n      this.isEdit = true; // 設為編輯模式\n      this.employeeForm = {\n        ...employee\n      }; // 用選中的員工資料初始化表單\n    },\n    // 提交新增或編輯的員工表單\n    submitEmployeeForm() {\n      if (this.isEdit) {\n        // 編輯員工資料\n        this.$apiService.put(this.$employees.updateEmployee(this.employeeForm.empId), this.employeeForm).then(() => {\n          const index = this.employees.findIndex(emp => emp.empId === this.employeeForm.empId);\n          if (index !== -1) {\n            this.employees[index] = {\n              ...this.employeeForm\n            }; // 更新資料\n          }\n          alert(\"員工資料更新成功！\");\n          this.closeDialog();\n        }).catch(error => {\n          console.error(\"Error updating employee:\", error);\n          alert(\"更新員工資料失敗！\");\n        });\n      } else {\n        // 新增員工資料\n        this.$apiService.post(this.$employees.addEmployee, this.employeeForm).then(res => {\n          this.employees.push(res); // 新增員工資料\n          alert(\"員工新增成功！\");\n          this.closeDialog();\n        }).catch(error => {\n          console.error(\"Error adding employee:\", error);\n          alert(\"新增員工失敗！\");\n        });\n      }\n    },\n    // 關閉對話框\n    closeDialog() {\n      this.isEmployeeDialogVisible = false;\n      this.employeeForm = {\n        empId: '',\n        name: '',\n        email: '',\n        floorSeatSeq: 0\n      }; // 重置表單\n    },\n    // 刪除員工\n    deleteEmployee(employee) {\n      this.$apiService.delete(this.$employees.deleteEmployee(employee.empId)).then(() => {\n        const index = this.employees.indexOf(employee);\n        if (index !== -1) {\n          this.employees.splice(index, 1); // 從列表中移除\n        }\n        alert(\"員工已刪除！\");\n      }).catch(error => {\n        console.error(\"Error deleting employee:\", error);\n        alert(\"刪除員工失敗！\");\n      });\n    }\n  },\n  created() {\n    this.loadEmployees(); // 頁面加載時調用API來加載員工資料\n  }\n};","map":{"version":3,"names":["name","data","searchQuery","employees","newEmployee","empId","email","floorSeatSeq","isEmployeeDialogVisible","isEdit","employeeForm","computed","filteredEmployees","filter","emp","includes","methods","loadEmployees","$apiService","get","$employees","getAllEmployees","then","res","catch","console","error","showAddEmployeeDialog","showEditEmployeeDialog","employee","submitEmployeeForm","put","updateEmployee","index","findIndex","alert","closeDialog","post","addEmployee","push","deleteEmployee","delete","indexOf","splice","created"],"sources":["C:\\Users\\tzutung\\employee-seating\\employee-seating-frontend\\src\\views\\Employee\\Employee.vue"],"sourcesContent":["<template>\r\n  <div class=\"employee-container\">\r\n    <h1>員工資料管理</h1>\r\n    <input type=\"text\" v-model=\"searchQuery\" placeholder=\"請輸入員編或姓名\" class=\"search-input\" />\r\n    <button @click=\"showAddEmployeeDialog\" class=\"btn add-btn\">\r\n      <i class=\"pi pi-plus\"></i> 新增員工\r\n    </button>\r\n    <table class=\"employee-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>員編</th>\r\n          <th>姓名</th>\r\n          <th>Email</th>\r\n          <th>座位</th>\r\n          <th>操作</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"employee in filteredEmployees\" :key=\"employee.empId\">\r\n          <td>{{ employee.empId }}</td>\r\n          <td>{{ employee.name }}</td>\r\n          <td>{{ employee.email }}</td>\r\n          <td>{{ employee.floorSeatSeq !== 0 ? `座位號: ${employee.floorSeatSeq}` : '未分配座位' }}</td>\r\n          <td>\r\n            <button @click=\"showEditEmployeeDialog(employee)\" class=\"btn edit-btn\">\r\n              <i class=\"pi pi-pencil\"></i> 編輯\r\n            </button>\r\n            <button @click=\"deleteEmployee(employee)\" class=\"btn delete-btn\">\r\n              <i class=\"pi pi-trash\"></i> 刪除\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- 員工新增/編輯視窗 -->\r\n    <div v-if=\"isEmployeeDialogVisible\" class=\"modal\">\r\n      <div class=\"modal-content\">\r\n        <span class=\"close-btn\" @click=\"closeDialog\">&times;</span>\r\n        <h3>{{ isEdit ? '編輯員工' : '新增員工' }}</h3>\r\n\r\n        <label>員編:</label>\r\n        <input type=\"text\" v-model=\"employeeForm.empId\" :disabled=\"isEdit\" placeholder=\"員編\" />\r\n\r\n        <label>姓名:</label>\r\n        <input type=\"text\" v-model=\"employeeForm.name\" placeholder=\"姓名\" />\r\n\r\n        <label>Email:</label>\r\n        <input type=\"email\" v-model=\"employeeForm.email\" placeholder=\"Email\" />\r\n\r\n        <label>座位:</label>\r\n        <input type=\"text\" :value=\"employeeForm.floorSeatSeq !== 0 ? employeeForm.floorSeatSeq : '未分配座位'\" disabled />\r\n\r\n        <div class=\"button-group\">\r\n          <button @click=\"submitEmployeeForm\" class=\"btn submit-btn\">送出</button>\r\n          <button @click=\"closeDialog\" class=\"btn cancel-btn\">取消</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport './Employee.css';\r\n\r\nexport default {\r\n  name: \"EmployeePage\",\r\n  data() {\r\n    return {\r\n      searchQuery: '',\r\n      employees: [],  // 儲存員工資料\r\n      newEmployee: { empId: '', name: '', email: '', floorSeatSeq: 0 },\r\n      isEmployeeDialogVisible: false, // 控制員工對話框顯示\r\n      isEdit: false, // 判斷是否為編輯模式\r\n      employeeForm: { empId: '', name: '', email: '', floorSeatSeq: 0 }, // 預設座位為 0（未分配座位）\r\n    };\r\n  },\r\n  computed: {\r\n    filteredEmployees() {\r\n      return this.employees.filter(emp =>\r\n        emp.empId.includes(this.searchQuery) || emp.name.includes(this.searchQuery)\r\n      );\r\n    }\r\n  },\r\n  methods: {\r\n    // 載入員工資料\r\n    loadEmployees() {\r\n      this.$apiService\r\n        .get(this.$employees.getAllEmployees)  // 使用API的方式\r\n        .then((res) => {\r\n          this.employees = res;\r\n        })\r\n        .catch(() => {\r\n          console.error(\"無法載入員工資料\");\r\n        });\r\n    },\r\n\r\n    // 顯示新增員工視窗\r\n    showAddEmployeeDialog() {\r\n      this.isEmployeeDialogVisible = true;\r\n      this.isEdit = false;  // 設為新增模式\r\n      this.employeeForm = { empId: '', name: '', email: '', floorSeatSeq: 0 };  // 重置表單，預設未分配座位\r\n    },\r\n\r\n    // 顯示編輯員工視窗\r\n    showEditEmployeeDialog(employee) {\r\n      this.isEmployeeDialogVisible = true;\r\n      this.isEdit = true;  // 設為編輯模式\r\n      this.employeeForm = { ...employee };  // 用選中的員工資料初始化表單\r\n    },\r\n\r\n    // 提交新增或編輯的員工表單\r\n    submitEmployeeForm() {\r\n      if (this.isEdit) {\r\n        // 編輯員工資料\r\n        this.$apiService\r\n          .put(this.$employees.updateEmployee(this.employeeForm.empId), this.employeeForm)\r\n          .then(() => {\r\n            const index = this.employees.findIndex(emp => emp.empId === this.employeeForm.empId);\r\n            if (index !== -1) {\r\n              this.employees[index] = { ...this.employeeForm };  // 更新資料\r\n            }\r\n            alert(\"員工資料更新成功！\");\r\n            this.closeDialog();\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error updating employee:\", error);\r\n            alert(\"更新員工資料失敗！\");\r\n          });\r\n      } else {\r\n        // 新增員工資料\r\n        this.$apiService\r\n          .post(this.$employees.addEmployee, this.employeeForm)\r\n          .then((res) => {\r\n            this.employees.push(res);  // 新增員工資料\r\n            alert(\"員工新增成功！\");\r\n            this.closeDialog();\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error adding employee:\", error);\r\n            alert(\"新增員工失敗！\");\r\n          });\r\n      }\r\n    },\r\n\r\n    // 關閉對話框\r\n    closeDialog() {\r\n      this.isEmployeeDialogVisible = false;\r\n      this.employeeForm = { empId: '', name: '', email: '', floorSeatSeq: 0 };  // 重置表單\r\n    },\r\n\r\n    // 刪除員工\r\n    deleteEmployee(employee) {\r\n      this.$apiService\r\n        .delete(this.$employees.deleteEmployee(employee.empId))\r\n        .then(() => {\r\n          const index = this.employees.indexOf(employee);\r\n          if (index !== -1) {\r\n            this.employees.splice(index, 1);  // 從列表中移除\r\n          }\r\n          alert(\"員工已刪除！\");\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error deleting employee:\", error);\r\n          alert(\"刪除員工失敗！\");\r\n        });\r\n    }\r\n  },\r\n  created() {\r\n    this.loadEmployees();  // 頁面加載時調用API來加載員工資料\r\n  }\r\n};\r\n</script>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}