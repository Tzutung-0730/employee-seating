{"ast":null,"code":"export default {\n  data() {\n    return {\n      seatingCharts: [],\n      // 儲存所有樓層的座位資料\n      employees: [],\n      // 儲存所有員工資料\n      selectedSeat: null,\n      // 被選中的座位\n      selectedEmpId: '' // 被選中的員工編號\n    };\n  },\n  created() {\n    this.loadSeatingCharts();\n    // this.loadEmployees();\n  },\n  methods: {\n    // 加載座位資料\n    async loadSeatingCharts() {\n      try {\n        // 使用全局的 ApiService\n        const response = await this.$apiService.get(Employees.getAllEmployees);\n        this.seatingCharts = response;\n      } catch (error) {\n        console.error('Error loading seating charts:', error);\n      }\n    }\n    // 加載員工資料\n    //   async loadEmployees() {\n    //     try {\n    //       this.employees = await getAllEmployees();\n    //     } catch (error) {\n    //       console.error('Error loading employees:', error);\n    //     }\n    //   },\n    //   // 根據座位狀態設定按鈕的樣式\n    //   getSeatClass(seat) {\n    //     if (seat.isOccupied) return 'seat-occupied'; // 已佔用\n    //     if (this.selectedSeat && this.selectedSeat.floorSeatSeq === seat.floorSeatSeq) return 'seat-selected'; // 選擇中的座位\n    //     return 'seat-empty'; // 空位\n    //   },\n    //   // 設定選擇的座位\n    //   selectSeat(seat) {\n    //     if (seat.isOccupied) return; // 如果座位已佔用，不能選擇\n    //     this.selectedSeat = seat;\n    //   },\n    //   // 提交選擇的座位安排\n    //   async submitArrangement() {\n    //     if (!this.selectedSeat || !this.selectedEmpId) {\n    //       alert('請選擇員工和座位！');\n    //       return;\n    //     }\n\n    //     // 更新座位的佔用狀態\n    //     try {\n    //       if (this.selectedSeat.isOccupied) {\n    //         // 如果該座位已佔用，將其標記為可用\n    //         await updateSeatStatusToAvailable(this.selectedSeat.floorSeatSeq);\n    //       }\n    //       // 標記新的座位為已佔用，並更新員工資料\n    //       await updateSeatStatusToOccupied(this.selectedSeat.floorSeatSeq);\n    //       alert('座位安排成功！');\n    //       this.loadSeatingCharts(); // 重新加載座位資料\n    //     } catch (error) {\n    //       console.error('Error updating seating arrangement:', error);\n    //       alert('座位安排失敗！');\n    //     }\n    //   }\n  }\n};","map":{"version":3,"names":["data","seatingCharts","employees","selectedSeat","selectedEmpId","created","loadSeatingCharts","methods","response","$apiService","get","Employees","getAllEmployees","error","console"],"sources":["C:\\Users\\tzutung\\Tzutung\\employee-seating-frontend\\src\\views\\SeatArrangement\\SeatArrangement.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>員工座位安排</h1>\r\n\r\n    <!-- 顯示座位的樓層和座位 -->\r\n    <div v-for=\"floor in seatingCharts\" :key=\"floor.floorNo\" class=\"floor\">\r\n      <h2>{{ floor.floorNo }} 樓</h2>\r\n      <div class=\"seats\">\r\n        <div v-for=\"seat in floor.seats\" :key=\"seat.floorSeatSeq\" class=\"seat-container\">\r\n          <button\r\n            :class=\"getSeatClass(seat)\"\r\n            @click=\"selectSeat(seat)\"\r\n            :disabled=\"seat.isOccupied\"\r\n          >\r\n            座位{{ seat.seatNo }} [{{ seat.isOccupied ? '員編:' + seat.empId : '空位' }}]\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 員工選擇下拉選單 -->\r\n    <div>\r\n      <label for=\"employeeSelect\">選擇員工：</label>\r\n      <select v-model=\"selectedEmpId\" id=\"employeeSelect\">\r\n        <option v-for=\"emp in employees\" :key=\"emp.empId\" :value=\"emp.empId\">\r\n          {{ emp.name }} (員編: {{ emp.empId }})\r\n        </option>\r\n      </select>\r\n    </div>\r\n\r\n    <!-- 送出按鈕 -->\r\n    <button @click=\"submitArrangement\">送出</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      seatingCharts: [],  // 儲存所有樓層的座位資料\r\n      employees: [],  // 儲存所有員工資料\r\n      selectedSeat: null,  // 被選中的座位\r\n      selectedEmpId: '',  // 被選中的員工編號\r\n    };\r\n  },\r\n  created() {\r\n    this.loadSeatingCharts();\r\n    // this.loadEmployees();\r\n  },\r\n  methods: {\r\n    // 加載座位資料\r\n    async loadSeatingCharts() {\r\n      try {\r\n        // 使用全局的 ApiService\r\n        const response = await this.$apiService.get(Employees.getAllEmployees);\r\n        this.seatingCharts = response;\r\n      } catch (error) {\r\n        console.error('Error loading seating charts:', error);\r\n      }\r\n    },\r\n    // 加載員工資料\r\n  //   async loadEmployees() {\r\n  //     try {\r\n  //       this.employees = await getAllEmployees();\r\n  //     } catch (error) {\r\n  //       console.error('Error loading employees:', error);\r\n  //     }\r\n  //   },\r\n  //   // 根據座位狀態設定按鈕的樣式\r\n  //   getSeatClass(seat) {\r\n  //     if (seat.isOccupied) return 'seat-occupied'; // 已佔用\r\n  //     if (this.selectedSeat && this.selectedSeat.floorSeatSeq === seat.floorSeatSeq) return 'seat-selected'; // 選擇中的座位\r\n  //     return 'seat-empty'; // 空位\r\n  //   },\r\n  //   // 設定選擇的座位\r\n  //   selectSeat(seat) {\r\n  //     if (seat.isOccupied) return; // 如果座位已佔用，不能選擇\r\n  //     this.selectedSeat = seat;\r\n  //   },\r\n  //   // 提交選擇的座位安排\r\n  //   async submitArrangement() {\r\n  //     if (!this.selectedSeat || !this.selectedEmpId) {\r\n  //       alert('請選擇員工和座位！');\r\n  //       return;\r\n  //     }\r\n\r\n  //     // 更新座位的佔用狀態\r\n  //     try {\r\n  //       if (this.selectedSeat.isOccupied) {\r\n  //         // 如果該座位已佔用，將其標記為可用\r\n  //         await updateSeatStatusToAvailable(this.selectedSeat.floorSeatSeq);\r\n  //       }\r\n  //       // 標記新的座位為已佔用，並更新員工資料\r\n  //       await updateSeatStatusToOccupied(this.selectedSeat.floorSeatSeq);\r\n  //       alert('座位安排成功！');\r\n  //       this.loadSeatingCharts(); // 重新加載座位資料\r\n  //     } catch (error) {\r\n  //       console.error('Error updating seating arrangement:', error);\r\n  //       alert('座位安排失敗！');\r\n  //     }\r\n  //   }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped src=\"./SeatArrangement.css\"></style>\r\n"],"mappings":"AAqCA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,EAAE;MAAG;MACpBC,SAAS,EAAE,EAAE;MAAG;MAChBC,YAAY,EAAE,IAAI;MAAG;MACrBC,aAAa,EAAE,EAAE,CAAG;IACtB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,iBAAiB,CAAC,CAAC;IACxB;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMD,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF;QACA,MAAME,QAAO,GAAI,MAAM,IAAI,CAACC,WAAW,CAACC,GAAG,CAACC,SAAS,CAACC,eAAe,CAAC;QACtE,IAAI,CAACX,aAAY,GAAIO,QAAQ;MAC/B,EAAE,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF;IACA;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}