{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"seating-arrangement\"\n};\nconst _hoisted_2 = {\n  class: \"employee-selection\"\n};\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = {\n  class: \"seats\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"submit-btn\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h1\", null, \"員工座位安排\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_cache[2] || (_cache[2] = _createElementVNode(\"label\", {\n    for: \"employeeSelect\"\n  }, \"選擇員工：\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedEmployee.empId = $event),\n    id: \"employeeSelect\"\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.employees, emp => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: emp.empId,\n      value: emp.empId\n    }, _toDisplayString(emp.name) + \" (員編: \" + _toDisplayString(emp.empId) + \") \", 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedEmployee.empId]])]), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.seatingCharts, seat => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: seat.seatNo,\n      class: \"seat-container\"\n    }, [_createElementVNode(\"button\", {\n      class: _normalizeClass($options.getSeatClass(seat)),\n      onClick: $event => $options.selectSeat(seat)\n    }, _toDisplayString(seat.floorNo) + \" 樓：座位\" + _toDisplayString(seat.seatNo) + \" \" + _toDisplayString(seat.isOccupied ? '[ 員編:' + seat.empId + ' ]' : ''), 11 /* TEXT, CLASS, PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.submitArrangement && $options.submitArrangement(...args))\n  }, \"送出\")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","for","_cache","$event","$data","selectedEmployee","empId","id","_Fragment","_renderList","employees","emp","key","value","name","_toDisplayString","_hoisted_3","_hoisted_4","seatingCharts","seat","seatNo","_normalizeClass","$options","getSeatClass","onClick","selectSeat","floorNo","isOccupied","_hoisted_5","_hoisted_6","args","submitArrangement"],"sources":["C:\\Users\\tzutung\\employee-seating\\employee-seating-frontend\\src\\views\\SeatArrangement\\SeatArrangement.vue"],"sourcesContent":["<template>\r\n  <div class=\"seating-arrangement\">\r\n    <h1>員工座位安排</h1>\r\n\r\n    <div class=\"employee-selection\">\r\n      <label for=\"employeeSelect\">選擇員工：</label>\r\n      <select v-model=\"selectedEmployee.empId\" id=\"employeeSelect\">\r\n        <option v-for=\"emp in employees\" :key=\"emp.empId\" :value=\"emp.empId\">\r\n          {{ emp.name }} (員編: {{ emp.empId }})\r\n        </option>\r\n      </select>\r\n    </div>\r\n\r\n    <div class=\"seats\">\r\n      <div v-for=\"seat in seatingCharts\" :key=\"seat.seatNo\" class=\"seat-container\">\r\n        <button\r\n          :class=\"getSeatClass(seat)\"\r\n          @click=\"selectSeat(seat)\"\r\n        >\r\n        {{ seat.floorNo }} 樓：座位{{ seat.seatNo }} {{ seat.isOccupied ? '[ 員編:' + seat.empId + ' ]' : '' }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"submit-btn\">\r\n      <button @click=\"submitArrangement\">送出</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport './SeatArrangement.css';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      seatingCharts: [],  // 儲存所有樓層的座位資料\r\n      employees: [],  // 儲存所有員工資料\r\n      selectedSeat: null,  // 被選中的座位\r\n      selectedEmployee: { empId: '', name: '', email: '' }\r\n    };\r\n  },\r\n\r\n  created() {\r\n    this.loadEmployees();\r\n    this.loadSeatingCharts();\r\n  },\r\n\r\n  methods: {\r\n    loadEmployees() {\r\n      this.$apiService\r\n        .get(this.$employees.getAllEmployees)\r\n        .then((res) => {\r\n          this.employees = res;\r\n          console.log(\"employees\", this.employees);\r\n        })\r\n        .catch(() => {\r\n          // Handle error here\r\n        });\r\n    },\r\n    \r\n    loadSeatingCharts() {\r\n      this.$apiService\r\n        .get(this.$seatingCharts.getEmployeeSeatAssignments)\r\n        .then((res) => {\r\n          this.seatingCharts = res;\r\n          console.log(\"seatingCharts\", this.seatingCharts);\r\n        })\r\n        .catch(() => {\r\n          // Handle error here\r\n        });\r\n    },\r\n\r\n    // Method to get the class for each seat based on the seat status\r\n    getSeatClass(seat) {\r\n      if (seat.isOccupied) {\r\n        return 'occupied';\r\n      }\r\n      if (this.selectedSeat && this.selectedSeat.seatNo === seat.seatNo && this.selectedSeat.floorNo === seat.floorNo) {\r\n        return 'selected';\r\n      }\r\n      return 'available';\r\n    },\r\n\r\n    // Method to handle seat selection\r\n    selectSeat(seat) {\r\n      console.log(\"Selected Seat:\", seat);\r\n      if (!seat.isOccupied) {\r\n        this.selectedSeat = seat;\r\n      }\r\n    },\r\n\r\n    // Method to handle form submission\r\n    submitArrangement() {\r\n      if (this.selectedSeat && this.selectedEmployee) {\r\n        const request = {\r\n          empId: this.selectedEmployee.empId,\r\n          name: this.selectedEmployee.name,\r\n          email: this.selectedEmployee.email,\r\n          floorSeatSeq: this.selectedSeat.floorSeatSeq\r\n        };\r\n        this.$apiService\r\n        .put(this.$employees.updateEmployee(this.selectedEmployee), request)\r\n        .then((res) => {\r\n          alert(\"座位安排更新成功！\");\r\n          console.log(\"更新座位成功：\", res);\r\n          this.loadSeatingCharts();\r\n          this.selectedSeat = null;\r\n          this.selectedEmployee = {};  \r\n        })\r\n        .catch((error) => {\r\n          console.error(\"更新失敗:\", error);\r\n          alert(\"更新失敗：\" + error.message);\r\n        });\r\n      } else {\r\n        alert(\"請選擇員工和座位！\");\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAqB;;EAGzBA,KAAK,EAAC;AAAoB;mBAJnC;;EAaSA,KAAK,EAAC;AAAO;mBAbtB;;EAwBSA,KAAK,EAAC;AAAY;;uBAvBzBC,mBAAA,CA0BM,OA1BNC,UA0BM,G,0BAzBJC,mBAAA,CAAe,YAAX,QAAM,sBAEVA,mBAAA,CAOM,OAPNC,UAOM,G,0BANJD,mBAAA,CAAyC;IAAlCE,GAAG,EAAC;EAAgB,GAAC,OAAK,sB,gBACjCF,mBAAA,CAIS;IAVf,uBAAAG,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMuBC,KAAA,CAAAC,gBAAgB,CAACC,KAAK,GAAAH,MAAA;IAAEI,EAAE,EAAC;yBAC1CV,mBAAA,CAESW,SAAA,QATjBC,WAAA,CAO8BL,KAAA,CAAAM,SAAS,EAAhBC,GAAG;yBAAlBd,mBAAA,CAES;MAFyBe,GAAG,EAAED,GAAG,CAACL,KAAK;MAAGO,KAAK,EAAEF,GAAG,CAACL;wBACzDK,GAAG,CAACG,IAAI,IAAG,QAAM,GAAAC,gBAAA,CAAGJ,GAAG,CAACL,KAAK,IAAG,IACrC,uBATRU,UAAA;2EAMuBZ,KAAA,CAAAC,gBAAgB,CAACC,KAAK,E,KAOzCP,mBAAA,CASM,OATNkB,UASM,I,kBARJpB,mBAAA,CAOMW,SAAA,QArBZC,WAAA,CAc0BL,KAAA,CAAAc,aAAa,EAArBC,IAAI;yBAAhBtB,mBAAA,CAOM;MAP8Be,GAAG,EAAEO,IAAI,CAACC,MAAM;MAAExB,KAAK,EAAC;QAC1DG,mBAAA,CAKS;MAJNH,KAAK,EAhBhByB,eAAA,CAgBkBC,QAAA,CAAAC,YAAY,CAACJ,IAAI;MACxBK,OAAK,EAAArB,MAAA,IAAEmB,QAAA,CAAAG,UAAU,CAACN,IAAI;wBAEtBA,IAAI,CAACO,OAAO,IAAG,OAAK,GAAAX,gBAAA,CAAGI,IAAI,CAACC,MAAM,IAAG,GAAC,GAAAL,gBAAA,CAAGI,IAAI,CAACQ,UAAU,aAAaR,IAAI,CAACb,KAAK,4CAnB1FsB,UAAA,E;oCAwBI7B,mBAAA,CAEM,OAFN8B,UAEM,GADJ9B,mBAAA,CAA8C;IAArCyB,OAAK,EAAAtB,MAAA,QAAAA,MAAA,UAAA4B,IAAA,KAAER,QAAA,CAAAS,iBAAA,IAAAT,QAAA,CAAAS,iBAAA,IAAAD,IAAA,CAAiB;KAAE,IAAE,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}